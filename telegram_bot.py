import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Audio
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
from mutagen import File as MutagenFile
from database import DatabaseManager
from models import create_tables
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_FOR_TRACK_NAME = "waiting_for_track_name"
WAITING_FOR_ARTIST_NAME = "waiting_for_artist_name"
WAITING_FOR_ALBUM_NAME = "waiting_for_album_name"
WAITING_FOR_PLAYLIST_NAME = "waiting_for_playlist_name"
CHOOSING_DESTINATION = "choosing_destination"

class MusicBot:
    def __init__(self):
        self.user_states = {}
        self.temp_audio_data = {}
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        db = DatabaseManager()
        try:
            user = db.get_or_create_user(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            
            keyboard = [
                [InlineKeyboardButton("üéµ –ú–æ–∏ –∞–ª—å–±–æ–º—ã", callback_data="view_albums")],
                [InlineKeyboardButton("üìù –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="view_playlists")],
            ]
            
            web_url = f"{config.WEB_BASE_URL}/web/{user.telegram_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º WebApp –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTTPS
            if config.USE_WEBAPP_BUTTON:
                keyboard.append([InlineKeyboardButton("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": web_url})])
                web_message = ""
            else:
                web_message = f"\n\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {web_url}"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–ø–µ—Å–µ–Ω–Ω–∏–∫–∞! üéµ\n\n"
                "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–ª—å–±–æ–º—ã –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã\n"
                "‚Ä¢ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –º—É–∑—ã–∫—É\n"
                "‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
                f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üéß{web_message}",
                reply_markup=reply_markup
            )
        finally:
            db.close()
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
        audio: Audio = update.message.audio
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = await context.bot.get_file(audio.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(audio.file_name or "audio.mp3")[1] or ".mp3"
        safe_filename = f"{audio.file_id}{file_extension}"
        file_path = os.path.join(config.UPLOAD_FOLDER, safe_filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await file.download_to_drive(file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        try:
            audio_file = MutagenFile(file_path)
            title = audio.title or (audio_file.get('TIT2', [None])[0] if audio_file else None) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"
            artist = audio.performer or (audio_file.get('TPE1', [None])[0] if audio_file else None) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            duration = audio.duration or (audio_file.info.length if audio_file else None)
        except:
            title = audio.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"
            artist = audio.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            duration = audio.duration
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.temp_audio_data[user_id] = {
            'title': title,
            'artist': artist,
            'file_path': file_path,
            'file_id': audio.file_id,
            'duration': int(duration) if duration else None
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = DatabaseManager()
        try:
            user = db.get_or_create_user(telegram_id=user_id)
            albums = db.get_user_albums(user.id)
            playlists = db.get_user_playlists(user.id)
            
            keyboard = []
            
            if albums:
                keyboard.append([InlineKeyboardButton("üìÄ –í—ã–±—Ä–∞—Ç—å –∞–ª—å–±–æ–º", callback_data="choose_album")])
            
            if playlists:
                keyboard.append([InlineKeyboardButton("üìù –í—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="choose_playlist")])
            
            keyboard.extend([
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º", callback_data="create_album")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫:\n"
                f"üé§ <b>{artist}</b>\n"
                f"üìÑ <b>{title}</b>\n\n"
                f"–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫?",
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        finally:
            db.close()
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        db = DatabaseManager()
        try:
            user = db.get_or_create_user(telegram_id=user_id)
            
            if data == "view_albums":
                await self.show_albums(query, db, user.id)
            elif data == "view_playlists":
                await self.show_playlists(query, db, user.id)
            elif data == "choose_album":
                await self.show_albums_for_selection(query, db, user.id)
            elif data == "choose_playlist":
                await self.show_playlists_for_selection(query, db, user.id)
            elif data == "create_album":
                await self.start_album_creation(query, user_id)
            elif data == "create_playlist":
                await self.start_playlist_creation(query, user_id)
            elif data.startswith("album_"):
                await self.handle_album_action(query, db, data)
            elif data.startswith("playlist_"):
                await self.handle_playlist_action(query, db, data)
            elif data.startswith("track_"):
                await self.send_track(query, db, data)
            elif data.startswith("add_to_album_"):
                await self.add_track_to_album(query, db, user.id, data)
            elif data.startswith("add_to_playlist_"):
                await self.add_track_to_playlist(query, db, user.id, data)
        finally:
            db.close()
    
    async def show_albums(self, query, db: DatabaseManager, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤"""
        albums = db.get_user_albums(user_id)
        
        if not albums:
            keyboard = [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª—å–±–æ–º", callback_data="create_album")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üìÄ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª—å–±–æ–º–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–ª—å–±–æ–º!",
                reply_markup=reply_markup
            )
            return
        
        keyboard = []
        for album in albums:
            track_count = len(db.get_album_tracks(album.id))
            keyboard.append([InlineKeyboardButton(
                f"üìÄ {album.name} ({track_count} —Ç—Ä–µ–∫–æ–≤)", 
                callback_data=f"album_{album.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª—å–±–æ–º", callback_data="create_album")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("üìÄ –í–∞—à–∏ –∞–ª—å–±–æ–º—ã:", reply_markup=reply_markup)
    
    async def show_playlists(self, query, db: DatabaseManager, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
        playlists = db.get_user_playlists(user_id)
        
        if not playlists:
            keyboard = [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç!",
                reply_markup=reply_markup
            )
            return
        
        keyboard = []
        for playlist in playlists:
            track_count = len(db.get_playlist_tracks(playlist.id))
            keyboard.append([InlineKeyboardButton(
                f"üìù {playlist.name} ({track_count} —Ç—Ä–µ–∫–æ–≤)", 
                callback_data=f"playlist_{playlist.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("üìù –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=reply_markup)
    
    async def show_albums_for_selection(self, query, db: DatabaseManager, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å–±–æ–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞"""
        albums = db.get_user_albums(user_id)
        
        keyboard = []
        for album in albums:
            keyboard.append([InlineKeyboardButton(
                f"üìÄ {album.name}", 
                callback_data=f"add_to_album_{album.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìÄ –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º:", reply_markup=reply_markup)
    
    async def show_playlists_for_selection(self, query, db: DatabaseManager, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞"""
        playlists = db.get_user_playlists(user_id)
        
        keyboard = []
        for playlist in playlists:
            keyboard.append([InlineKeyboardButton(
                f"üìù {playlist.name}", 
                callback_data=f"add_to_playlist_{playlist.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç:", reply_markup=reply_markup)
    
    async def handle_album_action(self, query, db: DatabaseManager, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–ª—å–±–æ–º–æ–º"""
        album_id = int(data.split("_")[1])
        album = db.get_album_by_id(album_id)
        tracks = db.get_album_tracks(album_id)
        
        if not tracks:
            await query.edit_message_text(f"üìÄ –ê–ª—å–±–æ–º '{album.name}' –ø—É—Å—Ç.")
            return
        
        keyboard = []
        for track in tracks:
            keyboard.append([InlineKeyboardButton(
                f"üéµ {track.artist} - {track.title}",
                callback_data=f"track_{track.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="view_albums")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìÄ <b>{album.name}</b>\n\n–¢—Ä–µ–∫–∏:",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def handle_playlist_action(self, query, db: DatabaseManager, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º"""
        playlist_id = int(data.split("_")[1])
        playlist = db.get_playlist_by_id(playlist_id)
        tracks = db.get_playlist_tracks(playlist_id)
        
        if not tracks:
            await query.edit_message_text(f"üìù –ü–ª–µ–π–ª–∏—Å—Ç '{playlist.name}' –ø—É—Å—Ç.")
            return
        
        keyboard = []
        for track in tracks:
            keyboard.append([InlineKeyboardButton(
                f"üéµ {track.artist} - {track.title}",
                callback_data=f"track_{track.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="view_playlists")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìù <b>{playlist.name}</b>\n\n–¢—Ä–µ–∫–∏:",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def send_track(self, query, db: DatabaseManager, data: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        track_id = int(data.split("_")[1])
        track = db.get_track_by_id(track_id)
        
        if not track:
            await query.answer("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            if track.file_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                await query.message.reply_audio(
                    audio=track.file_id,
                    caption=f"üéµ {track.artist} - {track.title}"
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏
                with open(track.file_path, 'rb') as audio_file:
                    await query.message.reply_audio(
                        audio=audio_file,
                        title=track.title,
                        performer=track.artist,
                        caption=f"üéµ {track.artist} - {track.title}"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞", show_alert=True)
    
    async def add_track_to_album(self, query, db: DatabaseManager, user_id: int, data: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –∞–ª—å–±–æ–º"""
        album_id = int(data.split("_")[-1])
        
        if user_id not in self.temp_audio_data:
            await query.answer("–î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        audio_data = self.temp_audio_data[user_id]
        user = db.get_or_create_user(telegram_id=user_id)
        
        track = db.add_track(
            user_id=user.id,
            title=audio_data['title'],
            artist=audio_data['artist'],
            file_path=audio_data['file_path'],
            file_id=audio_data['file_id'],
            duration=audio_data['duration'],
            album_id=album_id
        )
        
        album = db.get_album_by_id(album_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del self.temp_audio_data[user_id]
        
        await query.edit_message_text(
            f"‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–ª—å–±–æ–º '{album.name}'!\n\n"
            f"üéµ {audio_data['artist']} - {audio_data['title']}"
        )
    
    async def add_track_to_playlist(self, query, db: DatabaseManager, user_id: int, data: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
        playlist_id = int(data.split("_")[-1])
        
        if user_id not in self.temp_audio_data:
            await query.answer("–î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        audio_data = self.temp_audio_data[user_id]
        user = db.get_or_create_user(telegram_id=user_id)
        
        track = db.add_track(
            user_id=user.id,
            title=audio_data['title'],
            artist=audio_data['artist'],
            file_path=audio_data['file_path'],
            file_id=audio_data['file_id'],
            duration=audio_data['duration'],
            playlist_id=playlist_id
        )
        
        playlist = db.get_playlist_by_id(playlist_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del self.temp_audio_data[user_id]
        
        await query.edit_message_text(
            f"‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç '{playlist.name}'!\n\n"
            f"üéµ {audio_data['artist']} - {audio_data['title']}"
        )
    
    async def start_album_creation(self, query, user_id: int):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞"""
        self.user_states[user_id] = WAITING_FOR_ALBUM_NAME
        await query.edit_message_text("üìÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞:")
    
    async def start_playlist_creation(self, query, user_id: int):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        self.user_states[user_id] = WAITING_FOR_PLAYLIST_NAME
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in self.user_states:
            return
        
        state = self.user_states[user_id]
        db = DatabaseManager()
        
        try:
            user = db.get_or_create_user(telegram_id=user_id)
            
            if state == WAITING_FOR_ALBUM_NAME:
                album = db.create_album(user.id, text)
                del self.user_states[user_id]
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º
                if user_id in self.temp_audio_data:
                    keyboard = [[InlineKeyboardButton(
                        f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ '{album.name}'", 
                        callback_data=f"add_to_album_{album.id}"
                    )]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"‚úÖ –ê–ª—å–±–æ–º '{album.name}' —Å–æ–∑–¥–∞–Ω!\n\n–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –≤ —ç—Ç–æ—Ç –∞–ª—å–±–æ–º?",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(f"‚úÖ –ê–ª—å–±–æ–º '{album.name}' —Å–æ–∑–¥–∞–Ω!")
            
            elif state == WAITING_FOR_PLAYLIST_NAME:
                playlist = db.create_playlist(user.id, text)
                del self.user_states[user_id]
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
                if user_id in self.temp_audio_data:
                    keyboard = [[InlineKeyboardButton(
                        f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ '{playlist.name}'", 
                        callback_data=f"add_to_playlist_{playlist.id}"
                    )]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist.name}' —Å–æ–∑–¥–∞–Ω!\n\n–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –≤ —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç?",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist.name}' —Å–æ–∑–¥–∞–Ω!")
        
        finally:
            db.close()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î
    create_tables()
    
    if not config.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = MusicBot()
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.AUDIO, bot.handle_audio))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_message))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()